// Package handlers —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.
package handlers

import (
	"fmt"
	"math/rand"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

// Start –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *Handlers) Start(message *tgbotapi.Message) {
	text := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:"
	h.sendMessageWithMarkup(message.Chat.ID, text, h.getMainKeyboard())
}

// Help –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (h *Handlers) Help(message *tgbotapi.Message) {
	text := "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
		"\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
		"/month [–º–µ—Å—è—Ü] - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞\n" +
		"/month [–º–µ—Å—è—Ü] [–≥–æ–¥] - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥\n" +
		"/month [–º–µ—Å—è—Ü] -f - –†–µ–ª–∏–∑—ã —Ç–æ–ª—å–∫–æ –∂–µ–Ω—Å–∫–∏—Ö –≥—Ä—É–ø–ø\n" +
		"/month [–º–µ—Å—è—Ü] -m - –†–µ–ª–∏–∑—ã —Ç–æ–ª—å–∫–æ –º—É–∂—Å–∫–∏—Ö –≥—Ä—É–ø–ø\n" +
		"/search [–∞—Ä—Ç–∏—Å—Ç] - –ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É\n" +
		"/artists - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤\n" +
		"/metrics - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n" +
		"/homework - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n" +
		"/playlist - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ\n" +
		"\n" +
		fmt.Sprintf("–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤–∞–π—Ç–ª–∏—Å—Ç–æ–≤: @%s", h.getAdminUsername())
	h.sendMessageWithMarkup(message.Chat.ID, text, h.getMainKeyboard())
}

// Month –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /month
func (h *Handlers) Month(message *tgbotapi.Message) {
	args := strings.Fields(message.CommandArguments())
	if len(args) == 0 {
		h.sendMessageWithMarkup(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", h.getMainKeyboard())
		return
	}

	month := strings.ToLower(args[0])
	femaleOnly := false
	maleOnly := false
	year := ""

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
	for i, arg := range args[1:] {
		switch arg {
		case "-f":
			femaleOnly = true
		case "-m":
			maleOnly = true
		default:
			// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–ª–∞–≥, —Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–æ–¥
			if year == "" && i == 0 {
				year = arg
			}
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
	monthQuery := month
	if year != "" {
		monthQuery = fmt.Sprintf("%s-%s", month, year)
	}

	response, err := h.services.Release.GetReleasesForMonth(monthQuery, femaleOnly, maleOnly)
	if err != nil {
		h.logger.Error("Failed to get releases", zap.Error(err))
		h.sendMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err))
		return
	}

	h.sendMessageWithMarkup(message.Chat.ID, response, h.getMainKeyboard())
}

// Artists –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤
func (h *Handlers) Artists(message *tgbotapi.Message) {
	response := h.services.Artist.FormatArtists()
	h.sendMessageWithMarkup(message.Chat.ID, response, h.getMainKeyboard())
}

// Metrics –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
func (h *Handlers) Metrics(message *tgbotapi.Message) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
	text := "üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n\n" +
		"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n" +
		"  ‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: 0\n" +
		"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0\n\n" +
		"üé§ –ê—Ä—Ç–∏—Å—Ç—ã –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö:\n" +
		"  ‚Ä¢ –ñ–µ–Ω—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã: 0\n" +
		"  ‚Ä¢ –ú—É–∂—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã: 0\n" +
		"  ‚Ä¢ –í—Å–µ–≥–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤: 0\n\n" +
		"üíø –†–µ–ª–∏–∑—ã –≤ –∫—ç—à–µ:\n" +
		"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ª–∏–∑–æ–≤: 0\n" +
		"  ‚Ä¢ Hit rate –∫—ç—à–∞: 0.0%\n" +
		"  ‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏—è/–ø—Ä–æ–º–∞—Ö–∏: 0/0\n\n" +
		"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n" +
		"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 0ms\n" +
		"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: 0\n" +
		"  ‚Ä¢ –û—à–∏–±–æ–∫: 0 (0.0%)\n\n" +
		"üîÑ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n" +
		"  ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 0\n" +
		"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤: –ù–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å\n" +
		"  ‚Ä¢ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤: –ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ\n\n" +
		"üéµ –ü–ª–µ–π–ª–∏—Å—Ç:\n" +
		"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω\n" +
		"  ‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n" +
		"üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n" +
		"  ‚Ä¢ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: 0\n" +
		"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0"

	h.sendMessage(message.Chat.ID, text)
}

// Homework –≤—ã–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
func (h *Handlers) Homework(message *tgbotapi.Message) {
	userID := message.From.ID

	canRequest, err := h.services.Homework.CanRequestHomework(userID)
	if err != nil {
		h.logger.Error("Failed to check homework request", zap.Error(err))
		h.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
		return
	}
	if !canRequest {
		timeUntilNext := h.services.Homework.GetTimeUntilNextRequest(userID)
		hours := int(timeUntilNext.Hours())
		minutes := int(timeUntilNext.Minutes()) % 60

		var timeMessage string
		if hours > 0 {
			timeMessage = fmt.Sprintf("%d —á %d –º–∏–Ω", hours, minutes)
		} else {
			timeMessage = fmt.Sprintf("%d –º–∏–Ω", minutes)
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏
		homeworkInfo, err := h.services.Homework.GetActiveHomework(userID)
		if err != nil {
			h.logger.Error("Failed to get active homework", zap.Error(err))
		}
		var currentHomework string
		if homeworkInfo != nil {
			// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è "—Ä–∞–∑/—Ä–∞–∑–∞"
			var timesWord string
			switch {
			case homeworkInfo.PlayCount == 1:
				timesWord = "—Ä–∞–∑"
			case homeworkInfo.PlayCount >= 2 && homeworkInfo.PlayCount <= 4:
				timesWord = "—Ä–∞–∑–∞"
			default:
				timesWord = "—Ä–∞–∑"
			}

			// –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Spotify –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
			spotifyLink := fmt.Sprintf("https://open.spotify.com/track/%s", homeworkInfo.TrackID)

			currentHomework = fmt.Sprintf("\n\nüìö –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\nüéµ \"%s - %s\" (<a href=\"%s\">Spotify</a>) %d %s",
				homeworkInfo.Artist, homeworkInfo.Title, spotifyLink, homeworkInfo.PlayCount, timesWord)
		}

		h.sendMessageWithReply(message.Chat.ID,
			fmt.Sprintf("‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è! –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ %s.%s", timeMessage, currentHomework), message.MessageID)
		return
	}

	homework, err := h.services.Homework.GetRandomHomework(userID)
	if err != nil {
		h.logger.Error("Failed to get homework", zap.Error(err))
		h.sendMessageWithReply(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", message.MessageID)
		return
	}

	// –ü—É–ª —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
	musicEmojis := []string{"üéµ", "üé∂", "üéº", "üé§", "üé∏", "üéπ", "üé∫", "üéª", "ü•Å", "üé∑"}
	selectedMusicEmoji := musicEmojis[rand.Intn(len(musicEmojis))]

	// –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Spotify –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç
	spotifyLink := fmt.Sprintf("https://open.spotify.com/track/%s", homework.TrackID)

	// –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è "—Ä–∞–∑/—Ä–∞–∑–∞/—Ä–∞–∑"
	var timesWord string
	switch {
	case homework.PlayCount == 1:
		timesWord = "—Ä–∞–∑"
	case homework.PlayCount >= 2 && homework.PlayCount <= 4:
		timesWord = "—Ä–∞–∑–∞"
	default:
		timesWord = "—Ä–∞–∑"
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º Spotify –≤ —Å–∫–æ–±–∫–∞—Ö
	messageText := fmt.Sprintf("üé≤ –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –ø–æ—Å–ª—É—à–∞—Ç—å \"%s - %s\" (<a href=\"%s\">Spotify</a>) %s %d %s",
		homework.Artist, homework.Title, spotifyLink, selectedMusicEmoji, homework.PlayCount, timesWord)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
	h.sendMessageWithReplyAndMarkup(message.Chat.ID, messageText, message.MessageID, h.getMainKeyboard())
}

// Playlist –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ
func (h *Handlers) Playlist(message *tgbotapi.Message) {
	// –ü–æ–ª—É—á–∞–µ–º URL –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	playlistURL, err := h.services.Config.GetConfigValue("PLAYLIST_URL")
	if err != nil {
		h.logger.Error("Failed to get playlist URL from config", zap.Error(err))
		h.sendMessageWithReply(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", message.MessageID)
		return
	}

	if playlistURL == "" {
		h.sendMessageWithReply(message.Chat.ID, "‚ùå URL –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", message.MessageID)
		return
	}

	info, err := h.services.Playlist.GetPlaylistInfo()
	if err != nil {
		h.logger.Error("Failed to get playlist info", zap.Error(err))
		h.sendMessageWithReply(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", message.MessageID)
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Spotify –ø–ª–µ–π–ª–∏—Å—Ç
	spotifyPlaylistLink := fmt.Sprintf("https://open.spotify.com/playlist/%s", info.SpotifyID)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ
	messageText := fmt.Sprintf("üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ:\n\n"+
		"üéµ –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n"+
		"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: %d\n"+
		"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: %s\n"+
		"üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s\n\n"+
		"üîó –°—Å—ã–ª–∫–∞: (<a href=\"%s\">–û—Ç–∫—Ä—ã—Ç—å –≤ Spotify</a>)",
		info.Name, info.TrackCount, info.Owner, info.Description, spotifyPlaylistLink)

	h.sendMessageWithReplyAndMarkup(message.Chat.ID, messageText, message.MessageID, h.getMainKeyboard())
}

// CallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query
func (h *Handlers) CallbackQuery(query *tgbotapi.CallbackQuery) {
	err := h.keyboard.HandleCallbackQuery(query)
	if err != nil {
		h.logger.Error("Failed to handle callback query", zap.Error(err), zap.String("data", query.Data))
	}
}

// Unknown –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (h *Handlers) Unknown(message *tgbotapi.Message) {
	h.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")
}

// sendMessageWithReply –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply
func (h *Handlers) sendMessageWithReply(chatID int64, text string, replyToMessageID int) {
	if h.botAPI != nil {
		err := h.botAPI.SendMessageWithReply(chatID, text, replyToMessageID)
		if err != nil {
			h.logger.Error("Failed to send message with reply", zap.Int64("chat_id", chatID), zap.Error(err))
		}
	} else {
		h.logger.Warn("BotAPI not available, cannot send message with reply", zap.Int64("chat_id", chatID))
	}
}

// sendMessageWithReplyAndMarkup –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (h *Handlers) sendMessageWithReplyAndMarkup(chatID int64, text string, replyToMessageID int, markup interface{}) {
	if h.botAPI != nil {
		err := h.botAPI.SendMessageWithReplyAndMarkup(chatID, text, replyToMessageID, markup)
		if err != nil {
			h.logger.Error("Failed to send message with reply and markup", zap.Int64("chat_id", chatID), zap.Error(err))
		}
	} else {
		h.logger.Warn("BotAPI not available, cannot send message with reply and markup", zap.Int64("chat_id", chatID))
	}
}

// getAdminUsername –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func (h *Handlers) getAdminUsername() string {
	// –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	username, err := h.services.Config.GetConfigValue("ADMIN_USERNAME")
	if err != nil {
		h.logger.Warn("Failed to get admin username from config", zap.Error(err))
		return "admin" // Fallback –∑–Ω–∞—á–µ–Ω–∏–µ
	}

	if username == "" {
		return "admin" // Fallback –∑–Ω–∞—á–µ–Ω–∏–µ
	}

	return username
}

// Search –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /search
func (h *Handlers) Search(message *tgbotapi.Message) {
	args := strings.Fields(message.CommandArguments())
	if len(args) == 0 {
		h.sendMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search –∏–º—è_–∞—Ä—Ç–∏—Å—Ç–∞\n–ü—Ä–∏–º–µ—Ä: /search ITZY")
		return
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞
	artistName := strings.Join(args, " ")

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–∏–∑—ã –ø–æ –∞—Ä—Ç–∏—Å—Ç—É
	response, err := h.services.Release.GetReleasesByArtistName(artistName)
	if err != nil {
		h.logger.Error("Failed to get releases by artist", zap.Error(err))
		h.sendMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–ª–∏–∑–æ–≤: %v", err))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	h.sendMessage(message.Chat.ID, response)
}
