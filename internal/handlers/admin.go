// Package handlers —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
package handlers

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

// AddArtist –¥–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤ whitelist
func (h *Handlers) AddArtist(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.isAdmin(message.From) {
		h.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	args := strings.Fields(message.CommandArguments())
	if len(args) < 2 {
		h.sendMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_artist <artist_names> [-f|-m]\n–ü—Ä–∏–º–µ—Ä: /add_artist ITZY -f\n–ü—Ä–∏–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: /add_artist ablume, aespa, apink -f")
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏ —Ñ–ª–∞–≥
	artistNamesStr := strings.Join(args[:len(args)-1], " ")
	flag := strings.ToLower(args[len(args)-1])

	var isFemale bool
	var genderFlag string

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏
	switch flag {
	case "-f":
		isFemale = true
		genderFlag = "–∂–µ–Ω—Å–∫–∏–π"
	case "-m":
		isFemale = false
		genderFlag = "–º—É–∂—Å–∫–æ–π"
	default:
		h.sendMessage(message.Chat.ID, "–§–ª–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å -f (–∂–µ–Ω—Å–∫–∏–π) –∏–ª–∏ -m (–º—É–∂—Å–∫–æ–π). –ü—Ä–∏–º–µ—Ä: /add_artist ITZY -f")
		return
	}

	// –ü–∞—Ä—Å–∏–º –∏–º–µ–Ω–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏)
	artistNames := h.parseArtists(artistNamesStr)
	if len(artistNames) == 0 {
		h.sendMessage(message.Chat.ID, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞")
		return
	}

	addedCount, err := h.services.Artist.AddArtists(artistNames, isFemale)
	if err != nil {
		h.logger.Error("Failed to add artists", zap.Error(err))
		h.sendMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤: %v", err))
		return
	}

	if addedCount == 0 {
		h.sendMessage(message.Chat.ID, fmt.Sprintf("–í—Å–µ –∞—Ä—Ç–∏—Å—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ: %s", strings.Join(artistNames, ", ")))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
	if len(artistNames) == 1 {
		h.sendMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω %s –∞—Ä—Ç–∏—Å—Ç: %s", genderFlag, artistNames[0]))
	} else {
		h.sendMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ %d %s –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ %d: %s",
			addedCount, genderFlag, len(artistNames), strings.Join(artistNames, ", ")))
	}
}

// RemoveArtist –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤ (—Å–Ω–∏–º–∞–µ—Ç —Ñ–ª–∞–≥ is_active)
func (h *Handlers) RemoveArtist(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.isAdmin(message.From) {
		h.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	args := strings.Fields(message.CommandArguments())
	if len(args) < 1 {
		h.sendMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_artist <artist_names>\n–ü—Ä–∏–º–µ—Ä: /remove_artist ITZY\n–ü—Ä–∏–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: /remove_artist ablume, aespa, apink")
		return
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
	artistNamesStr := strings.Join(args, " ")

	// –ü–∞—Ä—Å–∏–º –∏–º–µ–Ω–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏)
	artistNames := h.parseArtists(artistNamesStr)
	if len(artistNames) == 0 {
		h.sendMessage(message.Chat.ID, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞")
		return
	}

	deactivatedCount, err := h.services.Artist.DeactivateArtists(artistNames)
	if err != nil {
		h.logger.Error("Failed to deactivate artists", zap.Error(err))
		h.sendMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤: %v", err))
		return
	}

	if deactivatedCount == 0 {
		h.sendMessage(message.Chat.ID, fmt.Sprintf("–ê—Ä—Ç–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã: %s", strings.Join(artistNames, ", ")))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
	if len(artistNames) == 1 {
		h.sendMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –ê—Ä—Ç–∏—Å—Ç %s –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)", artistNames[0]))
	} else {
		h.sendMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ %d –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ %d: %s",
			deactivatedCount, len(artistNames), strings.Join(artistNames, ", ")))
	}
}

// ClearWhitelists –æ—á–∏—â–∞–µ—Ç –≤—Å–µ whitelist
func (h *Handlers) ClearWhitelists(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.isAdmin(message.From) {
		h.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏ —É–¥–∞–ª—è–µ–º –∏—Ö
	artists, err := h.services.Artist.GetAll()
	if err != nil {
		h.logger.Error("Failed to get artists", zap.Error(err))
		h.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤.")
		return
	}

	var artistNames []string
	for _, artist := range artists {
		artistNames = append(artistNames, artist.Name)
	}

	if len(artistNames) > 0 {
		_, err = h.services.Artist.RemoveArtists(artistNames)
		if err != nil {
			h.logger.Error("Failed to remove artists", zap.Error(err))
			h.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤.")
			return
		}
	}

	h.sendMessage(message.Chat.ID, "‚úÖ –í—Å–µ –∞—Ä—Ç–∏—Å—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")
}

// ClearCache –æ—á–∏—â–∞–µ—Ç –∫—ç—à —Ä–µ–ª–∏–∑–æ–≤
func (h *Handlers) ClearCache(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.isAdmin(message.From) {
		h.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	h.sendMessage(message.Chat.ID, "‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
}

// Export —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
func (h *Handlers) Export(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.isAdmin(message.From) {
		h.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
	response, err := h.services.Artist.Export()
	if err != nil {
		h.logger.Error("Failed to export artists", zap.Error(err))
		h.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
		return
	}
	h.sendMessageWithMarkup(message.Chat.ID, response, h.getMainKeyboard())
}

// Config —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func (h *Handlers) Config(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.isAdmin(message.From) {
		h.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	args := strings.Fields(message.CommandArguments())
	if len(args) != 2 {
		h.sendMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /config [key] [value]")
		return
	}

	key := args[0]
	value := args[1]

	err := h.services.Config.Set(key, value)
	if err != nil {
		h.logger.Error("Failed to set config", zap.Error(err))
		h.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
		return
	}

	h.sendMessage(message.Chat.ID, fmt.Sprintf("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è %s —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ %s", key, value))
}

// ConfigList –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func (h *Handlers) ConfigList(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.isAdmin(message.From) {
		h.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	config, err := h.services.Config.GetAll()
	if err != nil {
		h.logger.Error("Failed to get config", zap.Error(err))
		h.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
		return
	}

	h.sendMessage(message.Chat.ID, config)
}

// ConfigReset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func (h *Handlers) ConfigReset(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.isAdmin(message.From) {
		h.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	err := h.services.Config.Reset()
	if err != nil {
		h.logger.Error("Failed to reset config", zap.Error(err))
		h.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
		return
	}

	h.sendMessage(message.Chat.ID, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
}

// ParseReleases –ø–∞—Ä—Å–∏—Ç —Ä–µ–ª–∏–∑—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
func (h *Handlers) ParseReleases(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.isAdmin(message.From) {
		h.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	args := strings.Fields(message.CommandArguments())

	// –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –ø–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
	if len(args) == 0 {
		currentMonth := strings.ToLower(time.Now().Format("January"))
		currentYear := time.Now().Year()
		h.logger.Info("No arguments provided, parsing current month",
			zap.String("month", currentMonth),
			zap.Int("year", currentYear))

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
		h.sendMessage(message.Chat.ID, fmt.Sprintf("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤ –∑–∞ %s %d...", currentMonth, currentYear))

		// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
		go func() {
			ctx := context.Background()
			totalCount, err := h.parseMonth(ctx, currentMonth, currentYear)

			if err != nil {
				h.logger.Error("Failed to parse releases", zap.Error(err))
				h.sendMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–ª–∏–∑–æ–≤: %v", err))
				return
			}

			h.sendMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d —Ä–µ–ª–∏–∑–æ–≤ –∑–∞ %s %d", totalCount, currentMonth, currentYear))
		}()
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
	h.sendMessage(message.Chat.ID, "üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		ctx := context.Background()
		var totalCount int
		var err error

		if len(args) == 1 {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –≥–æ–¥–æ–º (4 —Ü–∏—Ñ—Ä—ã)
			if year, parseErr := strconv.Atoi(args[0]); parseErr == nil && year >= 2000 && year <= 2100 {
				// –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ–≥–æ –≥–æ–¥–∞
				totalCount, err = h.parseYear(ctx, year)
			} else {
				// –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Å—è—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
				month := strings.ToLower(args[0])
				currentYear := time.Now().Year()
				totalCount, err = h.parseMonth(ctx, month, currentYear)
			}
		} else if len(args) == 2 {
			// –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
			month := strings.ToLower(args[0])
			year, parseErr := strconv.Atoi(args[1])
			if parseErr != nil {
				h.sendMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 4 —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025)")
				return
			}
			totalCount, err = h.parseMonth(ctx, month, year)
		} else {
			h.sendMessage(message.Chat.ID, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n\n"+
				"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"+
				"‚Ä¢ /parse_releases - –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞\n"+
				"‚Ä¢ /parse_releases <–º–µ—Å—è—Ü> - –ø–∞—Ä—Å–∏–Ω–≥ –º–µ—Å—è—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞\n"+
				"‚Ä¢ /parse_releases <–º–µ—Å—è—Ü> <–≥–æ–¥> - –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞\n"+
				"‚Ä¢ /parse_releases <–≥–æ–¥> - –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ–≥–æ –≥–æ–¥–∞\n\n"+
				"–ü—Ä–∏–º–µ—Ä—ã:\n"+
				"‚Ä¢ /parse_releases\n"+
				"‚Ä¢ /parse_releases september\n"+
				"‚Ä¢ /parse_releases september 2025\n"+
				"‚Ä¢ /parse_releases 2025")
			return
		}

		if err != nil {
			h.logger.Error("Failed to parse releases", zap.Error(err))
			h.sendMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–ª–∏–∑–æ–≤: %v", err))
			return
		}

		h.sendMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d —Ä–µ–ª–∏–∑–æ–≤", totalCount))
	}()
}

// parseMonth –ø–∞—Ä—Å–∏—Ç —Ä–µ–ª–∏–∑—ã –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
func (h *Handlers) parseMonth(ctx context.Context, month string, year int) (int, error) {
	h.logger.Info("Parsing month", zap.String("month", month), zap.Int("year", year))

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –º–µ—Å—è—Ü–∞ —Å –≥–æ–¥–æ–º –¥–ª—è —Å–∫—Ä–µ–π–ø–µ—Ä–∞
	monthWithYear := fmt.Sprintf("%s-%d", month, year)

	count, err := h.services.Release.ParseReleasesForMonth(ctx, monthWithYear)
	if err != nil {
		return 0, fmt.Errorf("failed to parse month %s %d: %w", month, year, err)
	}

	return count, nil
}

// parseYear –ø–∞—Ä—Å–∏—Ç —Ä–µ–ª–∏–∑—ã –∑–∞ –≤–µ—Å—å –≥–æ–¥
func (h *Handlers) parseYear(ctx context.Context, year int) (int, error) {
	h.logger.Info("Parsing year", zap.Int("year", year))

	months := []string{
		"january", "february", "march", "april", "may", "june",
		"july", "august", "september", "october", "november", "december",
	}

	totalCount := 0
	for _, month := range months {
		monthWithYear := fmt.Sprintf("%s-%d", month, year)

		count, err := h.services.Release.ParseReleasesForMonth(ctx, monthWithYear)
		if err != nil {
			h.logger.Warn("Failed to parse month",
				zap.String("month", month),
				zap.Int("year", year),
				zap.Error(err))
			continue
		}

		totalCount += count
		h.logger.Info("Parsed month",
			zap.String("month", month),
			zap.Int("year", year),
			zap.Int("count", count))
	}

	return totalCount, nil
}

// parseArtists –ø–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏
func (h *Handlers) parseArtists(input string) []string {
	// –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
	parts := strings.Split(input, ",")
	var artists []string
	for _, part := range parts {
		artist := strings.TrimSpace(part)
		if artist != "" {
			artists = append(artists, artist)
		}
	}
	return artists
}

// sendMessageWithMarkup –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (h *Handlers) sendMessageWithMarkup(chatID int64, text string, markup interface{}) {
	if h.botAPI != nil {
		err := h.botAPI.SendMessageWithMarkup(chatID, text, markup)
		if err != nil {
			h.logger.Error("Failed to send message with markup", zap.Int64("chat_id", chatID), zap.Error(err))
		}
	} else {
		h.logger.Warn("BotAPI not available, cannot send message with markup", zap.Int64("chat_id", chatID))
	}
}

// getMainKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
func (h *Handlers) getMainKeyboard() tgbotapi.InlineKeyboardMarkup {
	return h.keyboard.GetMainKeyboard()
}

// TasksList –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
func (h *Handlers) TasksList(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.isAdmin(message.From) {
		h.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	tasks, err := h.services.Task.GetAllTasks()
	if err != nil {
		h.logger.Error("Failed to get tasks", zap.Error(err))
		h.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")
		return
	}

	if len(tasks) == 0 {
		h.sendMessage(message.Chat.ID, "üìã –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}

	var result strings.Builder
	result.WriteString("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n")

	for _, task := range tasks {
		// –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
		status := "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
		if task.IsActive {
			status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞"
		}

		result.WriteString(fmt.Sprintf("üîß <b>%s</b> (%s)\n", task.Name, status))
		result.WriteString(fmt.Sprintf("   üìù %s\n", task.Description))
		result.WriteString(fmt.Sprintf("   ‚è∞ Cron: %s\n", task.CronExpression))
		result.WriteString(fmt.Sprintf("   üìä –ó–∞–ø—É—Å–∫–æ–≤: %d (—É—Å–ø–µ—à–Ω–æ: %d, –æ—à–∏–±–æ–∫: %d)\n",
			task.RunCount, task.SuccessCount, task.ErrorCount))

		if task.LastRun != nil {
			result.WriteString(fmt.Sprintf("   üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: %s\n",
				task.LastRun.Format("02.01.2006 15:04:05")))
		}

		if task.NextRun != nil {
			result.WriteString(fmt.Sprintf("   ‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: %s\n",
				task.NextRun.Format("02.01.2006 15:04:05")))
		}

		if task.LastError != "" {
			result.WriteString(fmt.Sprintf("   ‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: %s\n", task.LastError))
		}

		result.WriteString("\n")
	}

	h.sendMessage(message.Chat.ID, result.String())
}

// ReloadPlaylist –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ Spotify
func (h *Handlers) ReloadPlaylist(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.isAdmin(message.From) {
		h.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	h.sendMessage(message.Chat.ID, "üîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –ø–ª–µ–π–ª–∏—Å—Ç–∞...")

	err := h.services.Playlist.ReloadPlaylist()
	if err != nil {
		h.logger.Error("Failed to reload playlist", zap.Error(err))
		h.sendMessage(message.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: %v", err))
		return
	}

	h.sendMessage(message.Chat.ID, "‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!")
}

// Admin –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin
func (h *Handlers) Admin(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.isAdmin(message.From) {
		h.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	text := "üîß <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n" +
		"/add_artist [–∏–º–µ–Ω–∞] [-f|-m] - –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞(–æ–≤)\n" +
		"/remove_artist [–∏–º–µ–Ω–∞] - –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞(–æ–≤)\n" +
		"/export - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤\n" +
		"/config [–∫–ª—é—á] [–∑–Ω–∞—á–µ–Ω–∏–µ] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n" +
		"/config_list - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n" +
		"/config_reset - –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n" +
		"/tasks_list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n" +
		"/reload_playlist - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç\n" +
		"/parse_releases [–≥–æ–¥] - –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤\n" +
		"/parse_releases [–º–µ—Å—è—Ü] [–≥–æ–¥] - –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞\n" +
		"/parse_releases [–º–µ—Å—è—Ü] - –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Å—è—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞\n" +
		"/parse_releases - –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞\n\n" +
		"<b>–ü—Ä–∏–º–µ—Ä—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤:</b>\n" +
		"/add_artist ablume, aespa, apink -f\n" +
		"/remove_artist ablume, aespa, apink"

	h.sendMessage(message.Chat.ID, text)
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func (h *Handlers) sendMessage(chatID int64, text string) {
	if h.botAPI != nil {
		err := h.botAPI.SendMessage(chatID, text)
		if err != nil {
			h.logger.Error("Failed to send message", zap.Int64("chat_id", chatID), zap.Error(err))
		}
	} else {
		h.logger.Warn("BotAPI not available, cannot send message", zap.Int64("chat_id", chatID))
	}
}
