package commands

import (
	"fmt"
	"gemfactory/internal/telegrambot/bot/router"
	"gemfactory/internal/telegrambot/bot/types"
	"strings"
)

// RegisterUserRoutes registers user command handlers
func RegisterUserRoutes(r *router.Router, deps *types.Dependencies) {
	r.Handle("start", handleStart)
	r.Handle("help", handleHelp)
	r.Handle("month", handleMonth)
	r.Handle("whitelists", handleWhitelists)
	r.Handle("metrics", handleMetricsCommand)
}

func handleStart(ctx types.Context) error {
	return ctx.Deps.BotAPI.SendMessageWithMarkup(ctx.Message.Chat.ID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", ctx.Deps.Keyboard.GetMainKeyboard())
}

func handleHelp(ctx types.Context) error {
	text := "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
		"\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
		"/month [–º–µ—Å—è—Ü] - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü\n" +
		"/month [–º–µ—Å—è—Ü] -gg - –†–µ–ª–∏–∑—ã —Ç–æ–ª—å–∫–æ –∂–µ–Ω—Å–∫–∏—Ö –≥—Ä—É–ø–ø\n" +
		"/month [–º–µ—Å—è—Ü] -mg - –†–µ–ª–∏–∑—ã —Ç–æ–ª—å–∫–æ –º—É–∂—Å–∫–∏—Ö –≥—Ä—É–ø–ø\n" +
		"/whitelists - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤\n" +
		"/metrics - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n" +
		"\n" +
		fmt.Sprintf("–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤–∞–π—Ç–ª–∏—Å—Ç–æ–≤: @%s", ctx.Deps.Config.GetAdminUsername())
	return ctx.Deps.BotAPI.SendMessageWithMarkup(ctx.Message.Chat.ID, text, ctx.Deps.Keyboard.GetMainKeyboard())
}

func handleMonth(ctx types.Context) error {
	args := strings.Fields(ctx.Message.Text)[1:]
	if len(args) == 0 {
		return ctx.Deps.BotAPI.SendMessageWithMarkup(ctx.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", ctx.Deps.Keyboard.GetMainKeyboard())
	}

	month := strings.ToLower(args[0])
	femaleOnly := false
	maleOnly := false

	for _, arg := range args[1:] {
		switch arg {
		case "-gg":
			femaleOnly = true
		case "-mg":
			maleOnly = true
		}
	}

	response, err := ctx.Deps.ReleaseService.GetReleasesForMonth(month, femaleOnly, maleOnly)
	if err != nil {
		return ctx.Deps.BotAPI.SendMessage(ctx.Message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err))
	}

	return ctx.Deps.BotAPI.SendMessageWithMarkup(ctx.Message.Chat.ID, response, ctx.Deps.Keyboard.GetMainKeyboard())
}

func handleWhitelists(ctx types.Context) error {
	response := ctx.Deps.ArtistService.FormatWhitelists()
	return ctx.Deps.BotAPI.SendMessageWithMarkup(ctx.Message.Chat.ID, response, ctx.Deps.Keyboard.GetMainKeyboard())
}

// handleMetricsCommand handles the /metrics command
func handleMetricsCommand(ctx types.Context) error {
	var response strings.Builder
	response.WriteString("üìä **–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n")
	response.WriteString(fmt.Sprintf("ü§ñ **–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç:**\n"))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: %d\n", ctx.Deps.WorkerPool.GetProcessedJobs()))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á: %d\n", ctx.Deps.WorkerPool.GetFailedJobs()))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: %v\n", ctx.Deps.WorkerPool.GetProcessingTime()))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: %d\n\n", ctx.Deps.WorkerPool.GetQueueSize()))

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ command cache
	if ctx.Deps.CommandCache != nil {
		stats := ctx.Deps.CommandCache.Stats()
		response.WriteString(fmt.Sprintf("üóÇÔ∏è **Command Cache:**\n"))
		response.WriteString(fmt.Sprintf("  ‚Ä¢ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: %v\n", stats["size"]))
		response.WriteString(fmt.Sprintf("  ‚Ä¢ TTL: %v\n\n", stats["ttl"]))
	} else {
		response.WriteString("üóÇÔ∏è **Command Cache:** –û—Ç–∫–ª—é—á–µ–Ω\n\n")
	}

	response.WriteString("üîÑ **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n")
	response.WriteString("  ‚Ä¢ –í—Å–µ worker pool –∞–∫—Ç–∏–≤–Ω—ã\n")
	response.WriteString("  ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n")

	return ctx.Deps.BotAPI.SendMessage(ctx.Message.Chat.ID, response.String())
}
