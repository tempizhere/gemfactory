// Package service —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
package service

import (
	"fmt"
	"gemfactory/internal/model"
	"gemfactory/internal/storage/repository"
	"sort"
	"strings"

	"github.com/uptrace/bun"
	"go.uber.org/zap"
)

// ArtistService —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ç–∏—Å—Ç–∞–º–∏
type ArtistService struct {
	repo   model.ArtistRepository
	logger *zap.Logger
}

// NewArtistService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∞—Ä—Ç–∏—Å—Ç–æ–≤
func NewArtistService(db *bun.DB, logger *zap.Logger) *ArtistService {
	return &ArtistService{
		repo:   repository.NewArtistRepository(db, logger),
		logger: logger,
	}
}

// AddArtists –¥–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤
func (s *ArtistService) AddArtists(artists []string, isFemale bool) (int, error) {
	addedCount := 0
	for _, artistName := range artists {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—Ä—Ç–∏—Å—Ç
		artist, err := s.repo.GetByName(artistName)
		if err != nil {
			return addedCount, fmt.Errorf("failed to get artist %s: %w", artistName, err)
		}

		// –ï—Å–ª–∏ –∞—Ä—Ç–∏—Å—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
		if artist == nil {
			artist = &model.Artist{
				Name:     artistName,
				Gender:   model.FromBool(isFemale),
				IsActive: true, // –ù–æ–≤—ã–µ –∞—Ä—Ç–∏—Å—Ç—ã –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã
			}
			err = s.repo.Create(artist)
			if err != nil {
				return addedCount, fmt.Errorf("failed to create artist %s: %w", artistName, err)
			}
			addedCount++
		} else {
			// –ï—Å–ª–∏ –∞—Ä—Ç–∏—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
			updated := false
			if artist.IsFemale() != isFemale {
				artist.SetGender(isFemale)
				updated = true
			}
			if !artist.IsActive {
				artist.IsActive = true
				updated = true
			}

			if updated {
				err = s.repo.Update(artist)
				if err != nil {
					return addedCount, fmt.Errorf("failed to update artist %s: %w", artistName, err)
				}
				addedCount++
			}
		}
	}

	return addedCount, nil
}

// RemoveArtists —É–¥–∞–ª—è–µ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤ (—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
func (s *ArtistService) RemoveArtists(artists []string) (int, error) {
	removedCount := 0
	for _, artistName := range artists {
		// –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–∞
		artist, err := s.repo.GetByName(artistName)
		if err != nil {
			return removedCount, fmt.Errorf("failed to get artist %s: %w", artistName, err)
		}

		if artist == nil {
			s.logger.Warn("Artist not found", zap.String("artist", artistName))
			continue
		}

		// –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–∏—Å—Ç–∞
		err = s.repo.Delete(artist.ArtistID)
		if err != nil {
			return removedCount, fmt.Errorf("failed to delete artist %s: %w", artistName, err)
		}
		removedCount++
	}

	return removedCount, nil
}

// DeactivateArtists –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤ (—Å–Ω–∏–º–∞–µ—Ç —Ñ–ª–∞–≥ is_active)
func (s *ArtistService) DeactivateArtists(artists []string) (int, error) {
	deactivatedCount := 0
	for _, artistName := range artists {
		// –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–∞
		artist, err := s.repo.GetByName(artistName)
		if err != nil {
			return deactivatedCount, fmt.Errorf("failed to get artist %s: %w", artistName, err)
		}

		if artist == nil {
			s.logger.Warn("Artist not found", zap.String("artist", artistName))
			continue
		}

		// –ï—Å–ª–∏ –∞—Ä—Ç–∏—Å—Ç —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
		if !artist.IsActive {
			s.logger.Info("Artist already deactivated", zap.String("artist", artistName))
			continue
		}

		// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞—Ä—Ç–∏—Å—Ç–∞
		artist.IsActive = false
		err = s.repo.Update(artist)
		if err != nil {
			return deactivatedCount, fmt.Errorf("failed to deactivate artist %s: %w", artistName, err)
		}
		deactivatedCount++
	}

	return deactivatedCount, nil
}

// GetFemaleArtists –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∂–µ–Ω—Å–∫–∏—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤
func (s *ArtistService) GetFemaleArtists() ([]string, error) {
	artists, err := s.repo.GetByGenderAndActive(model.GenderFemale, true)
	if err != nil {
		return nil, fmt.Errorf("failed to get female artists: %w", err)
	}

	var names []string
	for _, artist := range artists {
		names = append(names, artist.Name)
	}

	return names, nil
}

// GetMaleArtists –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º—É–∂—Å–∫–∏—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤
func (s *ArtistService) GetMaleArtists() ([]string, error) {
	artists, err := s.repo.GetByGenderAndActive(model.GenderMale, true)
	if err != nil {
		return nil, fmt.Errorf("failed to get male artists: %w", err)
	}

	var names []string
	for _, artist := range artists {
		names = append(names, artist.Name)
	}

	return names, nil
}

// GetAll –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)
func (s *ArtistService) GetAll() ([]model.Artist, error) {
	return s.repo.GetAll()
}

// GetAllActive –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤
func (s *ArtistService) GetAllActive() ([]model.Artist, error) {
	return s.repo.GetActive()
}

// Export —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)
func (s *ArtistService) Export() (string, error) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)
	allArtists, err := s.GetAll()
	if err != nil {
		return "", fmt.Errorf("failed to get all artists: %w", err)
	}

	// –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∂–µ–Ω—Å–∫–∏—Ö –∏ –º—É–∂—Å–∫–∏—Ö
	var femaleArtists []string
	var maleArtists []string

	for _, artist := range allArtists {
		if artist.IsFemale() {
			femaleArtists = append(femaleArtists, artist.Name)
		} else {
			maleArtists = append(maleArtists, artist.Name)
		}
	}

	var response strings.Builder

	response.WriteString("<b>–ñ–µ–Ω—Å–∫–∏–µ –∞—Ä—Ç–∏—Å—Ç—ã:</b>\n")
	if len(femaleArtists) == 0 {
		response.WriteString("–ø—É—Å—Ç–æ\n")
	} else {
		sort.Strings(femaleArtists)
		response.WriteString(fmt.Sprintf("<code>%s</code>\n", strings.Join(femaleArtists, ", ")))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
	response.WriteString("\n")

	response.WriteString("<b>–ú—É–∂—Å–∫–∏–µ –∞—Ä—Ç–∏—Å—Ç—ã:</b>\n")
	if len(maleArtists) == 0 {
		response.WriteString("–ø—É—Å—Ç–æ\n")
	} else {
		sort.Strings(maleArtists)
		response.WriteString(fmt.Sprintf("<code>%s</code>\n", strings.Join(maleArtists, ", ")))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å—á–µ—Ç –≤ –∫–æ–Ω—Ü–µ
	response.WriteString(fmt.Sprintf("\nüìä –í—Å–µ–≥–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤: %d\nüíÉ –ñ–µ–Ω—Å–∫–∏—Ö: %d\nü§¶‚Äç‚ôÇÔ∏è –ú—É–∂—Å–∫–∏—Ö: %d",
		len(femaleArtists)+len(maleArtists), len(femaleArtists), len(maleArtists)))

	return response.String(), nil
}

// FormatArtists —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (s *ArtistService) FormatArtists() string {
	femaleArtists, _ := s.GetFemaleArtists()
	maleArtists, _ := s.GetMaleArtists()

	var response strings.Builder

	response.WriteString("<b>–ñ–µ–Ω—Å–∫–∏–µ –∞—Ä—Ç–∏—Å—Ç—ã:</b>\n")
	if len(femaleArtists) == 0 {
		response.WriteString("–ø—É—Å—Ç–æ\n")
	} else {
		sort.Strings(femaleArtists)
		response.WriteString(fmt.Sprintf("<code>%s</code>\n", strings.Join(femaleArtists, ", ")))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
	response.WriteString("\n")

	response.WriteString("<b>–ú—É–∂—Å–∫–∏–µ –∞—Ä—Ç–∏—Å—Ç—ã:</b>\n")
	if len(maleArtists) == 0 {
		response.WriteString("–ø—É—Å—Ç–æ\n")
	} else {
		sort.Strings(maleArtists)
		response.WriteString(fmt.Sprintf("<code>%s</code>\n", strings.Join(maleArtists, ", ")))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å—á–µ—Ç –≤ –∫–æ–Ω—Ü–µ
	response.WriteString(fmt.Sprintf("\nüìä –í—Å–µ–≥–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤: %d\nüíÉ –ñ–µ–Ω—Å–∫–∏—Ö: %d\nü§¶‚Äç‚ôÇÔ∏è –ú—É–∂—Å–∫–∏—Ö: %d",
		len(femaleArtists)+len(maleArtists), len(femaleArtists), len(maleArtists)))

	return response.String()
}

// GetArtistCounts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
func (s *ArtistService) GetArtistCounts() (femaleCount, maleCount, totalCount int, err error) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤
	artists, err := s.repo.GetActive()
	if err != nil {
		return 0, 0, 0, fmt.Errorf("failed to get active artists: %w", err)
	}

	femaleCount = 0
	maleCount = 0

	for _, artist := range artists {
		switch artist.Gender {
		case model.GenderFemale:
			femaleCount++
		case model.GenderMale:
			maleCount++
		// GenderMixed –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –≤ –ø–æ–¥—Å—á–µ—Ç–µ
		}
	}

	totalCount = femaleCount + maleCount
	return femaleCount, maleCount, totalCount, nil
}
