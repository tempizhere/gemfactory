// Package service —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
package service

import (
	"context"
	"fmt"
	"gemfactory/internal/external/scraper"
	"gemfactory/internal/model"
	"gemfactory/internal/storage/repository"
	"html"
	"strconv"
	"strings"
	"time"

	"github.com/uptrace/bun"
	"go.uber.org/zap"
)

// ReleaseService —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–ª–∏–∑–∞–º–∏
type ReleaseService struct {
	repo            model.ReleaseRepository
	releaseTypeRepo model.ReleaseTypeRepository
	artistRepo      model.ArtistRepository
	scraper         scraper.Fetcher
	logger          *zap.Logger
	utils           *model.ReleaseUtils
}

// NewReleaseService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Ä–µ–ª–∏–∑–æ–≤
func NewReleaseService(db *bun.DB, scraper scraper.Fetcher, logger *zap.Logger) *ReleaseService {
	return &ReleaseService{
		repo:            repository.NewReleaseRepository(db, logger),
		releaseTypeRepo: repository.NewReleaseTypeRepository(db, logger),
		artistRepo:      repository.NewArtistRepository(db, logger),
		scraper:         scraper,
		logger:          logger,
		utils:           model.NewReleaseUtils(),
	}
}

// GetReleasesForMonth –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ª–∏–∑—ã –∑–∞ –º–µ—Å—è—Ü —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
func (s *ReleaseService) GetReleasesForMonth(month string, femaleOnly, maleOnly bool) (string, error) {
	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–µ—Å—è—Ü
	month = strings.ToLower(month)

	// –ü–∞—Ä—Å–∏–º –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "september-2024")
	var year int
	if strings.Contains(month, "-") {
		parts := strings.Split(month, "-")
		if len(parts) == 2 {
			month = parts[0]
			if parsedYear, err := strconv.Atoi(parts[1]); err == nil {
				year = parsedYear
			}
		}
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
	var gender string
	if femaleOnly {
		gender = "female"
	} else if maleOnly {
		gender = "male"
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–∏–∑—ã
	var releases []model.Release
	var err error

	if gender != "" {
		var genderType model.Gender
		switch gender {
		case "female":
			genderType = model.GenderFemale
		case "male":
			genderType = model.GenderMale
		default:
			genderType = model.GenderMixed
		}

		if year > 0 {
			releases, err = s.repo.GetByMonthYearAndGender(month, year, genderType)
		} else {
			releases, err = s.repo.GetByMonthAndGender(month, genderType)
		}
	} else {
		if year > 0 {
			releases, err = s.repo.GetByMonthAndYear(month, year)
		} else {
			releases, err = s.repo.GetByMonth(month)
		}
	}

	if err != nil {
		return "", fmt.Errorf("failed to get releases for month %s: %w", month, err)
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var result strings.Builder
	result.WriteString(fmt.Sprintf("üéµ –†–µ–ª–∏–∑—ã –∑–∞ %s:\n\n", month))

	if len(releases) == 0 {
		result.WriteString("–†–µ–ª–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return result.String(), nil
	}

	for _, release := range releases {
		var artistName string
		if release.Artist != nil {
			artistName = release.Artist.Name
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–ª–∏–∑ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ | <b>–ê–†–¢–ò–°–¢</b> | –Ω–∞–∑–≤–∞–Ω–∏–µ (—Å—Å—ã–ª–∫–∞)
		line := fmt.Sprintf("%s | <b>%s</b>", release.Date, html.EscapeString(artistName))

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
		if release.Title != "" && release.Title != "N/A" {
			line += fmt.Sprintf(" | %s", html.EscapeString(release.Title))
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ MV –µ—Å–ª–∏ –µ—Å—Ç—å (–≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤ TitleTrack)
		if release.MV != "" && release.MV != "N/A" {
			// –û—á–∏—â–∞–µ–º TitleTrack
			cleanedTitleTrack := strings.ReplaceAll(release.TitleTrack, "Title Track:", "")
			cleanedTitleTrack = strings.TrimSpace(cleanedTitleTrack)

			if cleanedTitleTrack != "" && cleanedTitleTrack != "N/A" {
				// –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
				trackName := html.EscapeString(cleanedTitleTrack)
				line += fmt.Sprintf(" | <a href=\"%s\">%s</a>", release.MV, trackName)
			} else {
				// –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫—É
				line += fmt.Sprintf(" | <a href=\"%s\">Link</a>", release.MV)
			}
		} else if release.TitleTrack != "" && release.TitleTrack != "N/A" {
			// –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏, –Ω–æ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
			cleanedTitleTrack := strings.ReplaceAll(release.TitleTrack, "Title Track:", "")
			cleanedTitleTrack = strings.TrimSpace(cleanedTitleTrack)
			line += fmt.Sprintf(" | %s", html.EscapeString(cleanedTitleTrack))
		}

		result.WriteString(line + "\n")
	}

	return result.String(), nil
}

// CreateOrUpdateRelease —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–ª–∏–∑ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
func (s *ReleaseService) CreateOrUpdateRelease(release *model.Release) error {
	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–ª–∏–∑
	if err := s.utils.ValidateRelease(release); err != nil {
		return fmt.Errorf("release validation failed: %w", err)
	}

	// –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	release.Title = s.utils.CleanReleaseTitle(release.Title)
	release.AlbumName = s.utils.CleanReleaseTitle(release.AlbumName)
	release.TitleTrack = s.utils.CleanReleaseTitle(release.TitleTrack)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–ª–∏–∑–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
	if release.ReleaseTypeID == 0 {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ä–µ–ª–∏–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (single)
		releaseType, err := s.releaseTypeRepo.GetByName("single")
		if err != nil {
			return fmt.Errorf("failed to get default release type: %w", err)
		}
		if releaseType != nil {
			release.ReleaseTypeID = releaseType.ReleaseTypeID
		}
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
	if release.Date != "" {
		if parsedDate, err := s.utils.ParseReleaseDate(release.Date); err == nil {
			release.Month = s.utils.ExtractMonthFromDate(parsedDate)
			release.Year = s.utils.ExtractYearFromDate(parsedDate)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ª–∏–∑ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É –∏ –¥–∞—Ç–µ
	existingRelease, err := s.repo.GetByArtistAndDate(release.ArtistID, release.Date)
	if err != nil {
		return fmt.Errorf("failed to check for existing release: %w", err)
	}

	if existingRelease != nil {
		// –†–µ–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
		s.logger.Info("Release exists, updating",
			zap.String("artist_id", fmt.Sprintf("%d", release.ArtistID)),
			zap.String("date", release.Date),
			zap.String("old_track", existingRelease.TitleTrack),
			zap.String("new_track", release.TitleTrack),
			zap.String("old_youtube", existingRelease.MV),
			zap.String("new_youtube", release.MV))

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞
		existingRelease.AlbumName = release.AlbumName
		existingRelease.TitleTrack = release.TitleTrack
		existingRelease.MV = release.MV
		existingRelease.TimeMSK = release.TimeMSK
		existingRelease.ReleaseTypeID = release.ReleaseTypeID
		existingRelease.UpdatedAt = time.Now()

		s.logger.Info("Updated release fields",
			zap.String("old_album", existingRelease.AlbumName),
			zap.String("new_album", release.AlbumName),
			zap.String("old_track", existingRelease.TitleTrack),
			zap.String("new_track", release.TitleTrack),
			zap.String("old_youtube", existingRelease.MV),
			zap.String("new_youtube", release.MV))

		return s.repo.Update(existingRelease)
	} else {
		// –†–µ–ª–∏–∑ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
		s.logger.Info("Release not found, creating new",
			zap.String("artist_id", fmt.Sprintf("%d", release.ArtistID)),
			zap.String("date", release.Date),
			zap.String("track", release.TitleTrack),
			zap.String("youtube", release.MV))

		return s.repo.Create(release)
	}
}

// UpdateRelease –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–ª–∏–∑
func (s *ReleaseService) UpdateRelease(release *model.Release) error {
	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–ª–∏–∑
	if err := s.utils.ValidateRelease(release); err != nil {
		return fmt.Errorf("release validation failed: %w", err)
	}

	// –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	release.Title = s.utils.CleanReleaseTitle(release.Title)
	release.AlbumName = s.utils.CleanReleaseTitle(release.AlbumName)
	release.TitleTrack = s.utils.CleanReleaseTitle(release.TitleTrack)

	return s.repo.Update(release)
}

// FormatReleaseForDisplay —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–ª–∏–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (s *ReleaseService) FormatReleaseForDisplay(release *model.Release) string {
	return s.utils.FormatReleaseForDisplay(release)
}

// GetReleaseConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ–ª–∏–∑–æ–≤
func (s *ReleaseService) GetReleaseConfig() *model.ReleaseConfig {
	return model.NewReleaseConfig()
}

// FormatDate —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func (s *ReleaseService) FormatDate(dateStr string) (string, error) {
	parsedDate, err := s.utils.ParseReleaseDate(dateStr)
	if err != nil {
		return "", err
	}
	return s.utils.FormatReleaseDate(parsedDate), nil
}

// FormatTimeKST —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è KST
func (s *ReleaseService) FormatTimeKST(timeStr string) (string, error) {
	parsedTime, err := s.utils.ParseReleaseTime(timeStr)
	if err != nil {
		return "", err
	}
	return s.utils.FormatReleaseTime(parsedTime), nil
}

// ConvertKSTToMSK –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ KST –≤ MSK
func (s *ReleaseService) ConvertKSTToMSK(kstTimeStr string) (string, error) {
	return s.utils.ConvertKSTToMSKString(kstTimeStr)
}

// CleanLink –æ—á–∏—â–∞–µ—Ç —Å—Å—ã–ª–∫—É
func (s *ReleaseService) CleanLink(link string) string {
	return s.utils.CleanLink(link)
}

// FormatReleaseForTelegram —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–ª–∏–∑ –¥–ª—è Telegram
func (s *ReleaseService) FormatReleaseForTelegram(release *model.Release) string {
	return s.utils.FormatReleaseForTelegram(release)
}

// AddRelease –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–ª–∏–∑
func (s *ReleaseService) AddRelease(release *model.Release) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–µ–ª–∏–∑
	existing, err := s.repo.GetByArtist(release.ArtistID)
	if err != nil {
		return fmt.Errorf("failed to check existing releases: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
	for _, existingRelease := range existing {
		if existingRelease.Title == release.Title && existingRelease.Date == release.Date {
			var artistName string
			if release.Artist != nil {
				artistName = release.Artist.Name
			}
			return fmt.Errorf("release already exists: %s - %s", artistName, release.Title)
		}
	}

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑
	err = s.repo.Create(release)
	if err != nil {
		return fmt.Errorf("failed to create release: %w", err)
	}

	return nil
}

// DeleteRelease —É–¥–∞–ª—è–µ—Ç —Ä–µ–ª–∏–∑
func (s *ReleaseService) DeleteRelease(id int) error {
	err := s.repo.Delete(id)
	if err != nil {
		return fmt.Errorf("failed to delete release: %w", err)
	}

	return nil
}

// GetReleasesByArtist –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ª–∏–∑—ã –ø–æ –∞—Ä—Ç–∏—Å—Ç—É (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤)
func (s *ReleaseService) GetReleasesByArtist(artistID int) ([]model.Release, error) {
	releases, err := s.repo.GetByArtist(artistID)
	if err != nil {
		return nil, fmt.Errorf("failed to get releases by artist ID %d: %w", artistID, err)
	}

	return releases, nil
}

// GetReleasesByGender –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ª–∏–∑—ã –ø–æ –ø–æ–ª—É (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤)
func (s *ReleaseService) GetReleasesByGender(gender string) ([]model.Release, error) {
	var genderType model.Gender
	switch gender {
	case "female":
		genderType = model.GenderFemale
	case "male":
		genderType = model.GenderMale
	default:
		genderType = model.GenderMixed
	}

	releases, err := s.repo.GetByGender(genderType)
	if err != nil {
		return nil, fmt.Errorf("failed to get releases by gender %s: %w", gender, err)
	}

	return releases, nil
}

// GetAllReleases –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ä–µ–ª–∏–∑—ã (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤)
func (s *ReleaseService) GetAllReleases() ([]model.Release, error) {
	releases, err := s.repo.GetAll()
	if err != nil {
		return nil, fmt.Errorf("failed to get all releases: %w", err)
	}

	return releases, nil
}

// ParseReleasesForMonth –ø–∞—Ä—Å–∏—Ç —Ä–µ–ª–∏–∑—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
func (s *ReleaseService) ParseReleasesForMonth(ctx context.Context, month string) (int, error) {
	s.logger.Info("Starting to parse releases", zap.String("month", month))

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
	artists, err := s.artistRepo.GetActive()
	if err != nil {
		return 0, fmt.Errorf("failed to get artists: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
	artistMap := make(map[string]bool)
	for _, artist := range artists {
		artistMap[strings.ToLower(artist.Name)] = true
	}

	s.logger.Info("Found artists for filtering", zap.Int("count", len(artistMap)))

	// –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	var artistNames []string
	for artistName := range artistMap {
		artistNames = append(artistNames, artistName)
	}
	s.logger.Info("Active artists list", zap.Strings("artists", artistNames))

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –º–µ—Å—è—Ü–∞ (—Ñ–æ—Ä–º–∞—Ç: "september-2025" –∏–ª–∏ "september")
	year := time.Now().Format("2006") // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π –≥–æ–¥
	if strings.Contains(month, "-") {
		parts := strings.Split(month, "-")
		if len(parts) == 2 {
			month = parts[0]
			year = parts[1]
		}
	}

	// –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ—Å—è—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	months := []string{month}
	links, err := s.scraper.FetchMonthlyLinks(ctx, months, year)
	if err != nil {
		return 0, fmt.Errorf("failed to fetch monthly links: %w", err)
	}

	if len(links) == 0 {
		s.logger.Warn("No links found for month", zap.String("month", month))
		return 0, nil
	}

	// –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
	url := links[0]
	s.logger.Info("Found monthly page URL", zap.String("month", month), zap.String("url", url))

	scrapedReleases, err := s.scraper.ParseMonthlyPage(ctx, url, month, year, artistMap)
	if err != nil {
		return 0, fmt.Errorf("failed to parse monthly page: %w", err)
	}

	s.logger.Info("Parsed releases from scraper", zap.Int("count", len(scrapedReleases)))

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–ª–∏–∑—ã
	savedCount := 0
	for _, scrapedRelease := range scrapedReleases {
		// –ù–∞—Ö–æ–¥–∏–º –∞—Ä—Ç–∏—Å—Ç–∞ –≤ –±–∞–∑–µ (GetByName —Ç–µ–ø–µ—Ä—å —Å–∞–º –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è)
		artist, err := s.artistRepo.GetByName(scrapedRelease.Artist)
		if err != nil {
			s.logger.Warn("Failed to get artist from database",
				zap.String("artist", scrapedRelease.Artist),
				zap.Error(err))
			continue
		}

		// –ï—Å–ª–∏ –∞—Ä—Ç–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
		if artist == nil {
			s.logger.Info("Artist not found in database, creating new",
				zap.String("artist", scrapedRelease.Artist))

			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ —Å –ø–æ–ª–æ–º "mixed" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			// –ê–¥–º–∏–Ω —Å–º–æ–∂–µ—Ç –ø–æ—Ç–æ–º –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã
			newArtist := &model.Artist{
				Name:   scrapedRelease.Artist,
				Gender: model.GenderMixed, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é mixed
			}

			err = s.artistRepo.Create(newArtist)
			if err != nil {
				s.logger.Warn("Failed to create new artist",
					zap.String("artist", scrapedRelease.Artist),
					zap.Error(err))
				continue
			}

			artist = newArtist
			s.logger.Info("Created new artist",
				zap.String("artist", scrapedRelease.Artist),
				zap.String("gender", artist.Gender.String()))
		} else {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞
			// –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –∏–º—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (–≤–∫–ª—é—á–∞—è —Ä–µ–≥–∏—Å—Ç—Ä)
			if artist.Name != scrapedRelease.Artist {
				s.logger.Info("Updating artist name",
					zap.String("old_name", artist.Name),
					zap.String("new_name", scrapedRelease.Artist))

				artist.Name = scrapedRelease.Artist
				err = s.artistRepo.Update(artist)
				if err != nil {
					s.logger.Warn("Failed to update artist name",
						zap.String("artist", scrapedRelease.Artist),
						zap.Error(err))
				} else {
					s.logger.Info("Successfully updated artist name",
						zap.String("artist", scrapedRelease.Artist))
				}
			}
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ä–µ–ª–∏–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		releaseType, err := s.releaseTypeRepo.GetByName("single")
		if err != nil {
			s.logger.Warn("Failed to get default release type", zap.Error(err))
			continue
		}
		if releaseType == nil {
			s.logger.Warn("Default release type not found")
			continue
		}

		// –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑
		release := &model.Release{
			ArtistID:      artist.ArtistID,
			ReleaseTypeID: releaseType.ReleaseTypeID,
			Title:         scrapedRelease.AlbumName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º AlbumName –∫–∞–∫ Title
			TitleTrack:    scrapedRelease.TitleTrack,
			AlbumName:     scrapedRelease.AlbumName,
			MV:            scrapedRelease.MV,
			Date:          scrapedRelease.Date,
			TimeMSK:       scrapedRelease.TimeMSK,
			IsActive:      true,
		}

		// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
		if release.Date != "" {
			if parsedDate, err := s.utils.ParseReleaseDate(release.Date); err == nil {
				release.Month = s.utils.ExtractMonthFromDate(parsedDate)
				release.Year = s.utils.ExtractYearFromDate(parsedDate)
			}
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–ª–∏–∑
		err = s.CreateOrUpdateRelease(release)
		if err != nil {
			s.logger.Warn("Failed to save release",
				zap.String("artist", scrapedRelease.Artist),
				zap.String("title", scrapedRelease.AlbumName),
				zap.Error(err))
			continue
		}

		savedCount++
	}

	s.logger.Info("Completed parsing releases",
		zap.String("month", month),
		zap.Int("parsed", len(scrapedReleases)),
		zap.Int("saved", savedCount))

	return savedCount, nil
}

// GetReleasesByArtistName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ª–∏–∑—ã –ø–æ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞
func (s *ReleaseService) GetReleasesByArtistName(artistName string) (string, error) {
	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–∏–∑—ã –ø–æ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞
	releases, err := s.repo.GetByArtistName(artistName)
	if err != nil {
		return "", fmt.Errorf("failed to get releases for artist %s: %w", artistName, err)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
	s.logger.Info("Search results for artist",
		zap.String("artist", artistName),
		zap.Int("count", len(releases)))

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var result strings.Builder
	result.WriteString(fmt.Sprintf("üéµ –†–µ–ª–∏–∑—ã –∞—Ä—Ç–∏—Å—Ç–∞ %s:\n\n", artistName))

	if len(releases) == 0 {
		result.WriteString("–†–µ–ª–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return result.String(), nil
	}

	for _, release := range releases {
		var artistName string
		if release.Artist != nil {
			artistName = release.Artist.Name
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–ª–∏–∑ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ | <b>–ê–†–¢–ò–°–¢</b> | –Ω–∞–∑–≤–∞–Ω–∏–µ (—Å—Å—ã–ª–∫–∞)
		line := fmt.Sprintf("%s | <b>%s</b>", release.Date, html.EscapeString(artistName))

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
		if release.Title != "" && release.Title != "N/A" {
			line += fmt.Sprintf(" | %s", html.EscapeString(release.Title))
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ MV –µ—Å–ª–∏ –µ—Å—Ç—å (–≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤ TitleTrack)
		if release.MV != "" && release.MV != "N/A" {
			// –û—á–∏—â–∞–µ–º TitleTrack
			cleanedTitleTrack := strings.ReplaceAll(release.TitleTrack, "Title Track:", "")
			cleanedTitleTrack = strings.TrimSpace(cleanedTitleTrack)

			if cleanedTitleTrack != "" && cleanedTitleTrack != "N/A" {
				// –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
				trackName := html.EscapeString(cleanedTitleTrack)
				line += fmt.Sprintf(" | <a href=\"%s\">%s</a>", release.MV, trackName)
			} else {
				// –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫—É
				line += fmt.Sprintf(" | <a href=\"%s\">Link</a>", release.MV)
			}
		} else if release.TitleTrack != "" && release.TitleTrack != "N/A" {
			// –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏, –Ω–æ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
			cleanedTitleTrack := strings.ReplaceAll(release.TitleTrack, "Title Track:", "")
			cleanedTitleTrack = strings.TrimSpace(cleanedTitleTrack)
			line += fmt.Sprintf(" | %s", html.EscapeString(cleanedTitleTrack))
		}

		result.WriteString(line + "\n")
	}

	return result.String(), nil
}
