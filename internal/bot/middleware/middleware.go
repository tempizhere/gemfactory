package middleware

import (
	"fmt"
	"gemfactory/internal/domain/types"
	"time"

	"go.uber.org/zap"
)

// RequestContext —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
type RequestContext struct {
	StartTime time.Time
	RequestID string
	UserID    int64
	ChatID    int64
	Command   string
}

// LogRequest logs incoming commands with context
func LogRequest(ctx types.Context, next types.HandlerFunc) error {
	requestCtx := &RequestContext{
		StartTime: time.Now(),
		RequestID: fmt.Sprintf("%d-%d", ctx.UpdateID, time.Now().UnixNano()),
		UserID:    ctx.Message.From.ID,
		ChatID:    ctx.Message.Chat.ID,
		Command:   ctx.Message.Command(),
	}

	user := types.GetUserIdentifier(ctx.Message.From)

	ctx.Deps.Logger.Info("Processing command",
		zap.String("request_id", requestCtx.RequestID),
		zap.String("command", requestCtx.Command),
		zap.Int64("chat_id", requestCtx.ChatID),
		zap.String("user", user),
		zap.Int("update_id", ctx.UpdateID))

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π middleware/handler
	err := next(ctx)

	// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	duration := time.Since(requestCtx.StartTime)
	if err != nil {
		ctx.Deps.Logger.Error("Command completed with error",
			zap.String("request_id", requestCtx.RequestID),
			zap.String("command", requestCtx.Command),
			zap.Duration("duration", duration),
			zap.Error(err))
	} else {
		ctx.Deps.Logger.Info("Command completed successfully",
			zap.String("request_id", requestCtx.RequestID),
			zap.String("command", requestCtx.Command),
			zap.Duration("duration", duration))
	}

	return err
}

// Debounce prevents double-clicks with context timeout
func Debounce(ctx types.Context, next types.HandlerFunc) error {
	key := fmt.Sprintf("%d:%s", ctx.Message.Chat.ID, ctx.Message.Command())

	if !ctx.Deps.Debouncer.CanProcessRequest(key) {
		user := types.GetUserIdentifier(ctx.Message.From)
		ctx.Deps.Logger.Info("Command debounced",
			zap.String("command", ctx.Message.Command()),
			zap.Int64("chat_id", ctx.Message.Chat.ID),
			zap.String("user", user),
			zap.Int("update_id", ctx.UpdateID))

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –¥–µ–±–∞—É–Ω—Å–µ
		if err := ctx.Deps.BotAPI.SendMessage(ctx.Message.Chat.ID,
			"‚è±Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã"); err != nil {
			ctx.Deps.Logger.Error("Failed to send debounce message", zap.Error(err))
		}

		return nil
	}

	return next(ctx)
}

// ErrorHandler handles errors from handlers with better context
func ErrorHandler(ctx types.Context, next types.HandlerFunc) error {
	defer func() {
		if panicErr := recover(); panicErr != nil {
			user := types.GetUserIdentifier(ctx.Message.From)
			ctx.Deps.Logger.Error("Panic recovered in error handler",
				zap.String("command", ctx.Message.Command()),
				zap.Int64("chat_id", ctx.Message.Chat.ID),
				zap.String("user", user),
				zap.Int("update_id", ctx.UpdateID),
				zap.Any("panic", panicErr))

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
			if err := ctx.Deps.BotAPI.SendMessage(ctx.Message.Chat.ID,
				"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."); err != nil {
				ctx.Deps.Logger.Error("Failed to send panic message", zap.Error(err))
			}
		}
	}()

	err := next(ctx)
	if err != nil {
		user := types.GetUserIdentifier(ctx.Message.From)

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
		var errorMessage string
		switch {
		case types.IsCommandError(err):
			ctx.Deps.Logger.Warn("Command error",
				zap.String("command", ctx.Message.Command()),
				zap.Int64("chat_id", ctx.Message.Chat.ID),
				zap.String("user", user),
				zap.Int("update_id", ctx.UpdateID),
				zap.Error(err))
			errorMessage = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"

		case types.IsBotError(err):
			ctx.Deps.Logger.Error("Bot error",
				zap.String("command", ctx.Message.Command()),
				zap.Int64("chat_id", ctx.Message.Chat.ID),
				zap.String("user", user),
				zap.Int("update_id", ctx.UpdateID),
				zap.Error(err))
			errorMessage = "ü§ñ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞"

		default:
			ctx.Deps.Logger.Error("Unknown error",
				zap.String("command", ctx.Message.Command()),
				zap.Int64("chat_id", ctx.Message.Chat.ID),
				zap.String("user", user),
				zap.Int("update_id", ctx.UpdateID),
				zap.Error(err))
			errorMessage = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		if sendErr := ctx.Deps.BotAPI.SendMessage(ctx.Message.Chat.ID, errorMessage); sendErr != nil {
			ctx.Deps.Logger.Error("Failed to send error message", zap.Error(sendErr))
		}
	}

	return err
}

// AdminOnly restricts access to admin users with better validation
func AdminOnly(adminUsername string) func(ctx types.Context, next types.HandlerFunc) error {
	return func(ctx types.Context, next types.HandlerFunc) error {
		if ctx.Message.From == nil {
			ctx.Deps.Logger.Warn("No user information in message")
			return ctx.Deps.BotAPI.SendMessage(ctx.Message.Chat.ID,
				"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}

		if ctx.Message.From.UserName != adminUsername {
			user := types.GetUserIdentifier(ctx.Message.From)
			ctx.Deps.Logger.Warn("Unauthorized access attempt",
				zap.String("command", ctx.Message.Command()),
				zap.String("user", user),
				zap.String("expected_admin", adminUsername))

			return ctx.Deps.BotAPI.SendMessage(ctx.Message.Chat.ID,
				"üîí –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
		}

		return next(ctx)
	}
}

// Wrap wraps a middleware and handler into a HandlerFunc (backward compatibility)
func Wrap(mw func(ctx types.Context, next types.HandlerFunc) error, handler types.HandlerFunc) types.HandlerFunc {
	return func(ctx types.Context) error {
		return mw(ctx, handler)
	}
}

// MetricsMiddleware –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
func MetricsMiddleware(ctx types.Context, next types.HandlerFunc) error {
	if ctx.Deps.Metrics == nil {
		// –ï—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π handler
		return next(ctx)
	}

	startTime := time.Now()
	command := ctx.Message.Command()
	userID := ctx.Message.From.ID

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	ctx.Deps.Metrics.RecordUserCommand(command, userID)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
	err := next(ctx)

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	duration := time.Since(startTime)
	ctx.Deps.Metrics.RecordResponseTime(duration)

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
	if err != nil {
		ctx.Deps.Metrics.RecordError()
	}

	return err
}
