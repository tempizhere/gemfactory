package commands

import (
	"fmt"
	"gemfactory/internal/bot/middleware"
	"gemfactory/internal/bot/router"
	"gemfactory/internal/domain/types"
	"math/rand"
	"strings"

	"go.uber.org/zap"
)

// RegisterUserRoutes registers user command handlers
func RegisterUserRoutes(r *router.Router, _ *types.Dependencies) {
	r.Handle("start", handleStart)
	r.Handle("help", handleHelp)
	r.Handle("month", middleware.Wrap(middleware.Debounce, handleMonth))
	r.Handle("whitelists", handleWhitelists)
	r.Handle("metrics", handleMetricsCommand)
	r.Handle("homework", handleHomework)
}

func handleStart(ctx types.Context) error {
	return ctx.Deps.BotAPI.SendMessageWithMarkup(ctx.Message.Chat.ID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", ctx.Deps.Keyboard.GetMainKeyboard())
}

func handleHelp(ctx types.Context) error {
	text := "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
		"\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
		"/month [–º–µ—Å—è—Ü] - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü\n" +
		"/month [–º–µ—Å—è—Ü] -gg - –†–µ–ª–∏–∑—ã —Ç–æ–ª—å–∫–æ –∂–µ–Ω—Å–∫–∏—Ö –≥—Ä—É–ø–ø\n" +
		"/month [–º–µ—Å—è—Ü] -mg - –†–µ–ª–∏–∑—ã —Ç–æ–ª—å–∫–æ –º—É–∂—Å–∫–∏—Ö –≥—Ä—É–ø–ø\n" +
		"/whitelists - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤\n" +
		"/metrics - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n" +
		"/homework - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n" +
		"\n" +
		fmt.Sprintf("–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤–∞–π—Ç–ª–∏—Å—Ç–æ–≤: @%s", ctx.Deps.Config.GetAdminUsername())
	return ctx.Deps.BotAPI.SendMessageWithMarkup(ctx.Message.Chat.ID, text, ctx.Deps.Keyboard.GetMainKeyboard())
}

func handleMonth(ctx types.Context) error {
	args := strings.Fields(ctx.Message.Text)[1:]
	if len(args) == 0 {
		return ctx.Deps.BotAPI.SendMessageWithMarkup(ctx.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", ctx.Deps.Keyboard.GetMainKeyboard())
	}

	month := strings.ToLower(args[0])
	femaleOnly := false
	maleOnly := false

	for _, arg := range args[1:] {
		switch arg {
		case "-gg":
			femaleOnly = true
		case "-mg":
			maleOnly = true
		}
	}

	response, err := ctx.Deps.ReleaseService.GetReleasesForMonth(month, femaleOnly, maleOnly)
	if err != nil {
		return ctx.Deps.BotAPI.SendMessage(ctx.Message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err))
	}

	return ctx.Deps.BotAPI.SendMessageWithMarkup(ctx.Message.Chat.ID, response, ctx.Deps.Keyboard.GetMainKeyboard())
}

func handleWhitelists(ctx types.Context) error {
	response := ctx.Deps.ArtistService.FormatWhitelists()
	return ctx.Deps.BotAPI.SendMessageWithMarkup(ctx.Message.Chat.ID, response, ctx.Deps.Keyboard.GetMainKeyboard())
}

// handleMetricsCommand handles the /metrics command
func handleMetricsCommand(ctx types.Context) error {
	// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
	ctx.Deps.Metrics.UpdateArtistMetrics(
		len(ctx.Deps.ArtistService.GetFemaleWhitelist()),
		len(ctx.Deps.ArtistService.GetMaleWhitelist()),
	)
	ctx.Deps.Metrics.UpdateReleaseMetrics(ctx.Deps.Cache.GetCachedReleasesCount())

	stats := ctx.Deps.Metrics.GetStats()

	var response strings.Builder
	response.WriteString("üìä **–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n")

	// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
	userActivity := stats["user_activity"].(map[string]interface{})
	response.WriteString("üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n")
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: %v\n", userActivity["total_commands"]))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v\n\n", userActivity["unique_users"]))

	// –ê—Ä—Ç–∏—Å—Ç—ã
	artists := stats["artists"].(map[string]interface{})
	response.WriteString("üé§ **–ê—Ä—Ç–∏—Å—Ç—ã –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö:**\n")
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –ñ–µ–Ω—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã: %v\n", artists["female_artists"]))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –ú—É–∂—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã: %v\n", artists["male_artists"]))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –í—Å–µ–≥–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤: %v\n\n", artists["total_artists"]))

	// –†–µ–ª–∏–∑—ã
	releases := stats["releases"].(map[string]interface{})
	response.WriteString("üíø **–†–µ–ª–∏–∑—ã –≤ –∫—ç—à–µ:**\n")
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ª–∏–∑–æ–≤: %v\n", releases["cached_releases"]))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ Hit rate –∫—ç—à–∞: %.1f%%\n", releases["cache_hit_rate"]))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏—è/–ø—Ä–æ–º–∞—Ö–∏: %v/%v\n\n", releases["cache_hits"], releases["cache_misses"]))

	// –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	performance := stats["performance"].(map[string]interface{})
	response.WriteString("‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**\n")
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: %v\n", performance["avg_response_time"]))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %v\n", performance["total_requests"]))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –û—à–∏–±–æ–∫: %v (%.1f%%)\n\n", performance["error_count"], performance["error_rate"]))

	// –°–∏—Å—Ç–µ–º–∞
	system := stats["system"].(map[string]interface{})
	response.WriteString("üîÑ **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n")
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %v\n", system["uptime"]))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %v\n", system["last_cache_update"]))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %v\n", system["next_cache_update"]))

	// –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
	response.WriteString("\nüìö **–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:**\n")
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: %d\n", ctx.Deps.HomeworkCache.GetTotalRequests()))
	response.WriteString(fmt.Sprintf("  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n", ctx.Deps.HomeworkCache.GetUniqueUsers()))

	return ctx.Deps.BotAPI.SendMessage(ctx.Message.Chat.ID, response.String())
}

// handleHomework –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /homework
func handleHomework(ctx types.Context) error {
	userID := ctx.Message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
	if !ctx.Deps.HomeworkCache.CanRequest(userID) {
		timeUntilNext := ctx.Deps.HomeworkCache.GetTimeUntilNextRequest(userID)
		hours := int(timeUntilNext.Hours())
		minutes := int(timeUntilNext.Minutes()) % 60

		var timeMessage string
		if hours > 0 {
			timeMessage = fmt.Sprintf("%d —á %d –º–∏–Ω", hours, minutes)
		} else {
			timeMessage = fmt.Sprintf("%d –º–∏–Ω", minutes)
		}

		return ctx.Deps.BotAPI.SendMessage(ctx.Message.Chat.ID,
			fmt.Sprintf("‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è! –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ %s.", timeMessage))
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6
	playCount := rand.Intn(6) + 1

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç
	if !ctx.Deps.PlaylistManager.IsLoaded() {
		return ctx.Deps.BotAPI.SendMessage(ctx.Message.Chat.ID,
			"‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞.")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
	track, err := ctx.Deps.PlaylistManager.GetRandomTrack()
	if err != nil {
		ctx.Deps.Logger.Error("Failed to get random track", zap.Error(err))
		return ctx.Deps.BotAPI.SendMessage(ctx.Message.Chat.ID,
			"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –ü—É–ª —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
	musicEmojis := []string{"üéµ", "üé∂", "üéº", "üé§", "üé∏", "üéπ", "üé∫", "üéª", "ü•Å", "üé∑"}
	headphonesEmojis := []string{"üéß", "üéß", "üéß", "üéß", "üéß", "üéß", "üéß", "üéß", "üéß", "üéß"}

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏
	selectedMusicEmoji := musicEmojis[rand.Intn(len(musicEmojis))]
	selectedHeadphonesEmoji := headphonesEmojis[rand.Intn(len(headphonesEmojis))]

	// –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Spotify –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç
	spotifyLink := fmt.Sprintf("https://open.spotify.com/track/%s", track.ID)

	// –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è "—Ä–∞–∑/—Ä–∞–∑–∞/—Ä–∞–∑"
	var timesWord string
	switch {
	case playCount == 1:
		timesWord = "—Ä–∞–∑"
	case playCount >= 2 && playCount <= 4:
		timesWord = "—Ä–∞–∑–∞"
	default:
		timesWord = "—Ä–∞–∑"
	}

	message := fmt.Sprintf("üé≤ %s –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: %s –ø–æ—Å–ª—É—à–∞—Ç—å \"%s - %s\" (<a href=\"%s\">Spotify</a>) %d %s %s",
		selectedMusicEmoji, selectedHeadphonesEmoji, track.Artist, track.Title, spotifyLink, playCount, timesWord, selectedMusicEmoji)

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∫—ç—à
	ctx.Deps.HomeworkCache.RecordRequest(userID)

	ctx.Deps.Logger.Info("Homework command executed",
		zap.String("user", types.GetUserIdentifier(ctx.Message.From)),
		zap.Int64("chat_id", ctx.Message.Chat.ID),
		zap.String("artist", track.Artist),
		zap.String("title", track.Title),
		zap.Int("play_count", playCount))

	return ctx.Deps.BotAPI.SendMessageWithMarkup(ctx.Message.Chat.ID, message, nil)
}
