// Package middleware —Å–æ–¥–µ—Ä–∂–∏—Ç middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
package middleware

import (
	"gemfactory/internal/config"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"
)

// AdminOnlyMiddleware –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å –ª—É—á—à–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
func AdminOnlyMiddleware(adminUsername string, logger *zap.Logger) func(update tgbotapi.Update, next func(tgbotapi.Update)) {
	return func(update tgbotapi.Update, next func(tgbotapi.Update)) {
		if update.Message == nil {
			next(update)
			return
		}

		if update.Message.From == nil {
			logger.Warn("No user information in message")
			// TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
			// if err := sendMessage(update.Message.Chat.ID, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"); err != nil {
			// 	logger.Error("Failed to send error message", zap.Error(err))
			// }
			return
		}

		if update.Message.From.UserName != adminUsername {
			user := getUserIdentifier(update.Message.From)
			logger.Warn("Unauthorized access attempt",
				zap.String("command", update.Message.Command()),
				zap.String("user", user),
				zap.String("expected_admin", adminUsername))

			// TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
			// if err := sendMessage(update.Message.Chat.ID, "üîí –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"); err != nil {
			// 	logger.Error("Failed to send access denied message", zap.Error(err))
			// }
			return
		}

		next(update)
	}
}

// AdminOnlyMiddlewareWithError –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func AdminOnlyMiddlewareWithError(adminUsername string, logger *zap.Logger) func(update tgbotapi.Update, next func(tgbotapi.Update) error) error {
	return func(update tgbotapi.Update, next func(tgbotapi.Update) error) error {
		if update.Message == nil {
			return next(update)
		}

		if update.Message.From == nil {
			logger.Warn("No user information in message")
			// TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
			// if err := sendMessage(update.Message.Chat.ID, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"); err != nil {
			// 	logger.Error("Failed to send error message", zap.Error(err))
			// }
			return nil
		}

		if update.Message.From.UserName != adminUsername {
			user := getUserIdentifier(update.Message.From)
			logger.Warn("Unauthorized access attempt",
				zap.String("command", update.Message.Command()),
				zap.String("user", user),
				zap.String("expected_admin", adminUsername))

			// TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
			// if err := sendMessage(update.Message.Chat.ID, "üîí –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"); err != nil {
			// 	logger.Error("Failed to send access denied message", zap.Error(err))
			// }
			return nil
		}

		return next(update)
	}
}

// AdminOnlyMiddlewareWithConfig –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func AdminOnlyMiddlewareWithConfig(config *config.Config, logger *zap.Logger) func(update tgbotapi.Update, next func(tgbotapi.Update)) {
	return AdminOnlyMiddleware(config.AdminUsername, logger)
}

// AdminOnlyMiddlewareWithConfigAndError –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func AdminOnlyMiddlewareWithConfigAndError(config *config.Config, logger *zap.Logger) func(update tgbotapi.Update, next func(tgbotapi.Update) error) error {
	return AdminOnlyMiddlewareWithError(config.AdminUsername, logger)
}
