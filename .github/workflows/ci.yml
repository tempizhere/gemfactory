name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'
  DOCKER_IMAGE: tempizhere/gemfactory

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/.cache/golangci-lint
          key: ${{ runner.os }}-go-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-lint-
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.8
          args: --timeout=5m
          cache: true

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-test-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-test-
      - name: Install dependencies
        run: go mod download
      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
      - name: Run security scan
        run: |
          go install github.com/sonatype-nexus-community/nancy@latest
          go list -json -deps ./... | nancy sleuth

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-
      - name: Build for multiple platforms
        run: |
          GOOS=linux GOARCH=amd64 go build -o build/gemfactory-linux-amd64 cmd/bot/main.go
          GOOS=linux GOARCH=arm64 go build -o build/gemfactory-linux-arm64 cmd/bot/main.go
          GOOS=darwin GOARCH=amd64 go build -o build/gemfactory-darwin-amd64 cmd/bot/main.go
          GOOS=darwin GOARCH=arm64 go build -o build/gemfactory-darwin-arm64 cmd/bot/main.go
          GOOS=windows GOARCH=amd64 go build -o build/gemfactory-windows-amd64.exe cmd/bot/main.go
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-binaries
          path: build/

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            tempizhere/gemfactory:latest
            ${{ github.ref_type == 'tag' && github.ref_name || '' }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=docker
          cache-to: type=gha,mode=max,scope=docker
      - name: Docker Build Summary
        if: always()
        run: |
          echo '### üê≥ Docker image —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '**–¢–µ–≥–∏:**' >> $GITHUB_STEP_SUMMARY
          echo '- `${{ steps.meta.outputs.tags }}`' >> $GITHUB_STEP_SUMMARY
          echo '- `tempizhere/gemfactory:latest`' >> $GITHUB_STEP_SUMMARY
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "- \\`${GITHUB_REF_NAME}\\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '**Docker Hub:** https://hub.docker.com/r/tempizhere/gemfactory' >> $GITHUB_STEP_SUMMARY

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [docker]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy to server
        run: |
          echo "Deploying to production server..."
          # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è
          # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ SSH –∏–ª–∏ Kubernetes
          echo "Deployment completed successfully"

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [lint, test, build, docker, release, deploy]
    steps:
      - name: Notify failure
        run: |
          echo "CI/CD pipeline failed!"
          # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (Slack, Telegram, etc.)