name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'
  DOCKER_IMAGE: tempizhere/gemfactory

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Run linter
      uses: golangci/golangci-lint-action@v4
      with:
        version: v1.64.8
        args: --timeout=5m

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run security scan
      run: |
        go install github.com/sonatype-nexus-community/nancy@latest
        go list -json -deps ./... | nancy sleuth

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 go build -o build/gemfactory-linux-amd64 cmd/bot/main.go
        GOOS=linux GOARCH=arm64 go build -o build/gemfactory-linux-arm64 cmd/bot/main.go
        GOOS=darwin GOARCH=amd64 go build -o build/gemfactory-darwin-amd64 cmd/bot/main.go
        GOOS=darwin GOARCH=arm64 go build -o build/gemfactory-darwin-arm64 cmd/bot/main.go
        GOOS=windows GOARCH=amd64 go build -o build/gemfactory-windows-amd64.exe cmd/bot/main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-binaries
        path: build/

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      run: |
        echo "Deploying to production server..."
        # Здесь можно добавить команды для деплоя
        # Например, через SSH или Kubernetes
        echo "Deployment completed successfully"

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [test, build, docker, deploy]

    steps:
    - name: Notify failure
      run: |
        echo "CI/CD pipeline failed!"
        # Здесь можно добавить уведомления (Slack, Telegram, etc.)